{"ast":null,"code":"var _jsxFileName = \"/home/diego/projectos/Redes/frontend/src/components/home/Home.js\";\nimport React, { useEffect, useState } from 'react';\nimport { Input, message, Table, Form, Button, InputNumber } from 'antd';\nimport useForm from '../../Hook/useForm.js';\n\nfunction Home() {\n  document.title = \"Calculadora de Subredes\";\n  const [form, formedit] = useForm();\n  const [data, setData] = useState([]);\n  const [valido, setValido] = useState();\n  const columns = [{\n    title: \"Numero de Subred\",\n    dataIndex: \"subred\",\n    key: 'subred'\n  }, {\n    title: \"Direccion de Subred\",\n    dataIndex: \"direccion\",\n    key: 'direccion'\n  }, {\n    title: \"Primer dir IP Host\",\n    dataIndex: \"pip\",\n    key: 'pip'\n  }, {\n    title: \"Ultima dir IP Host\",\n    dataIndex: \"uip\",\n    key: 'uip'\n  }, {\n    title: \"Dir Brodcast\",\n    dataIndex: \"brodcast\",\n    key: 'brodcast'\n  }, {\n    title: \"Mascara\",\n    dataIndex: \"mascara\",\n    key: 'mascara'\n  }];\n\n  const pushear = () => {\n    if (form.direccionIP && form.numSub) {\n      const direccion = form.direccionIP.split(\".\");\n      const numSub = parseInt(form.numSub, 10);\n      let isnum = /^\\d+$/.test(numSub);\n\n      if (!isnum) {\n        setValido(\"Ingresa un numero de subredes valido\");\n        setData([]);\n      }\n\n      if (direccion.length !== 4) {\n        setValido(\"Direccion no valida ingresa otra con el formato punteado\");\n        setData([]);\n      } else {\n        if (checarDireccion(direccion)) {\n          const clase = calcularClase(parseInt(direccion[0], 10), numSub);\n\n          if (cabe(numSub, clase)) {\n            const mascara = calcularMascara(clase, numSub);\n            let red = calcularDireccionRed(clase, direccion);\n            const brodcast = direccionBrodcast(red, clase);\n            let nuevos = crearSubredes(red, numSub, mascara, brodcast);\n            setData(nuevos);\n          } else {\n            setValido(\"Eres ambicisioso pero no caben tantas subredes en tu direccion IP, prueba otra\");\n            setData([]);\n          }\n        }\n      }\n    } else {\n      setValido(\"Porfavor ingresa todos los campos  \");\n      setData([]);\n    }\n  };\n\n  const crearSubredes = (red, numSub, mascara, brodcast) => {\n    let nuevosDatos = [];\n    const tam = 2 ** (7 - calcularBitsSub(numSub));\n\n    for (let i = 0; i < numSub; i++) {\n      red = calcularedActual(red, numSub, i);\n      nuevosDatos.push({\n        key: i,\n        subred: i + 1,\n        direccion: calcularedActual(red, numSub, i).join(\".\"),\n        pip: calcularPrimera(red, numSub, i).join(\".\"),\n        uip: calcularUltima(red, numSub, i + 1).join(\".\"),\n        brodcast: brodcast,\n        mascara: mascara.join(\".\")\n      });\n    }\n\n    return nuevosDatos;\n  };\n\n  const calcularedActual = (red, numSub, actual) => {\n    let nue = [];\n    red.map(e => nue.push(e));\n    let suma = actual * 2 ** (8 - calcularBitsSub(numSub));\n\n    for (let i = 3; i >= 0; i--) {\n      if (suma >= 255) {\n        nue[i] = suma - 255;\n        suma = suma - 255;\n      } else {\n        nue[i] = suma;\n        i = -1;\n      }\n    }\n\n    return nue;\n  };\n\n  const calcularPrimera = (red, numSub, actual) => {\n    let nue = [];\n    red.map(e => nue.push(e));\n    nue = calcularedActual(nue, numSub, actual);\n\n    for (let i = 3; i >= 0; i--) {\n      if (nue[i] < 255) {\n        nue[i] = nue[i] + 1;\n        i = -1;\n      }\n    }\n\n    return nue;\n  };\n\n  const calcularUltima = (red, numSub, actual) => {\n    let nue = [];\n    red.map(e => nue.push(e));\n    let suma = actual * 2 ** (8 - calcularBitsSub(numSub));\n    suma--;\n\n    for (let i = 3; i >= 0; i--) {\n      if (suma >= 255) {\n        nue[i] = suma - 255;\n        suma = suma - 255;\n      } else {\n        nue[i] = suma;\n        i = -1;\n      }\n    }\n\n    return nue;\n  };\n\n  const checarDireccion = direccion => {\n    for (let i = 0; i < direccion.length; i++) {\n      const valid = /^\\d+$/.test(direccion[i]);\n\n      if (!valid || direccion[i].length < 0 && direccion[i].length > 4) {\n        setValido(\"Direccion no valida ingresa otra con el formato punteado\");\n        setData([]);\n        return false;\n      }\n    }\n\n    return true;\n  };\n\n  const cabe = (numSub, clase) => {\n    if (clase === \"A\" && numSub <= 8388608) return true;else if (clase === \"B\" && numSub <= 32768) return true;else if (clase === \"C\" && numSub <= 128) return true;\n    return false;\n  };\n\n  const calcularClase = (primerO, numSub) => {\n    let clase;\n    const bits = calcularBitsSub(numSub);\n    if (primerO <= 127) clase = \"A\";else if (primerO > 127 && primerO <= 191) clase = \"B\";else if (primerO > 191 && primerO <= 223) clase = \"C\";else if (primerO > 223 && primerO <= 239) clase = \"D\";else if (primerO > 240 && primerO <= 255) clase = \"E\";else {\n      setValido(\"Red no valida ingresa otra\");\n      setData([]);\n      return \"F\";\n    }\n    setValido(\"Red Clase \" + clase + \" con \" + bits + \" bit para subnetting\");\n    return clase;\n  };\n\n  const calcularDireccionRed = (clase, direccionIP) => {\n    let red = direccionIP;\n    if (clase == \"A\") red[(1, 2, 3)] = 0;else if (clase == \"B\") red[(2, 3)] = 0;else if (clase == \"C\") red[3] = 0;\n    return red;\n  };\n\n  const calcularMascara = (clase, numSub) => {\n    const sub = calcularBitsSub(numSub);\n    if (clase == \"A\") return prestarAhost([255, 0, 0, 0], sub);else if (clase == \"B\") return prestarAhost([255, 255, 0, 0], sub);else if (clase == \"C\") return prestarAhost([255, 255, 255, 0], sub);else return prestarAhost([255, 255, 255, 255], sub);\n  };\n\n  const prestarAhost = (mascara, sub) => {\n    let suma = 0;\n\n    for (let i = 0; i < sub; i++) {\n      suma += 2 ** (7 - i);\n    }\n\n    for (let i = 0; i < 4; i++) {\n      if (mascara[i] != 255) {\n        if (suma > 255) {\n          mascara[i] = 255;\n          suma -= 255;\n        } else {\n          mascara[i] = suma;\n          suma = 0;\n          i = 4;\n        }\n      }\n    }\n\n    return mascara;\n  };\n\n  const calcularBitsSub = numSub => {\n    let numero = 1;\n\n    while (2 ** numero < numSub) numero++;\n\n    return numero;\n  };\n\n  const direccionBrodcast = (red, clase) => {\n    let nue = [];\n    red.map(e => nue.push(e));\n\n    if (clase === \"A\") {\n      nue[(1, 2, 3)] = 255;\n    } else if (clase === \"B\") {\n      nue[(2, 3)] = 255;\n    } else if (clase === \"C\") {\n      nue[3] = 255;\n    }\n\n    return nue;\n  };\n\n  return /*#__PURE__*/React.createElement(\"div\", {\n    className: \"negro\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 239,\n      columnNumber: 5\n    }\n  }, /*#__PURE__*/React.createElement(\"div\", {\n    className: \"todo\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 240,\n      columnNumber: 7\n    }\n  }, /*#__PURE__*/React.createElement(\"h1\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 241,\n      columnNumber: 9\n    }\n  }, \"Bienvenido a calcular las subredes de una Direccion IP\"), /*#__PURE__*/React.createElement(\"h2\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 242,\n      columnNumber: 9\n    }\n  }, \" Cual direccion quieres usar? \"), /*#__PURE__*/React.createElement(Form, {\n    layout: \"vertical\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 243,\n      columnNumber: 9\n    }\n  }, /*#__PURE__*/React.createElement(\"label\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 244,\n      columnNumber: 11\n    }\n  }, \" Direccion IP \"), /*#__PURE__*/React.createElement(Input, {\n    placeholder: \"Ingresa tu direccion IP\",\n    name: \"direccionIP\",\n    onChange: e => formedit(e),\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 245,\n      columnNumber: 11\n    }\n  }), /*#__PURE__*/React.createElement(\"label\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 247,\n      columnNumber: 11\n    }\n  }, \" Numero de Subredes \"), /*#__PURE__*/React.createElement(Input, {\n    placeholder: \"Cuantas subredes deseas\",\n    name: \"numSub\",\n    type: \"number\",\n    onChange: e => formedit(e),\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 248,\n      columnNumber: 11\n    }\n  }), /*#__PURE__*/React.createElement(Button, {\n    type: \"primary\",\n    onClick: pushear,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 250,\n      columnNumber: 11\n    }\n  }, \"Submit\")), /*#__PURE__*/React.createElement(\"h2\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 252,\n      columnNumber: 9\n    }\n  }, valido), /*#__PURE__*/React.createElement(Table, {\n    columns: columns,\n    dataSource: data,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 253,\n      columnNumber: 9\n    }\n  })));\n}\n\nexport default Home;","map":{"version":3,"sources":["/home/diego/projectos/Redes/frontend/src/components/home/Home.js"],"names":["React","useEffect","useState","Input","message","Table","Form","Button","InputNumber","useForm","Home","document","title","form","formedit","data","setData","valido","setValido","columns","dataIndex","key","pushear","direccionIP","numSub","direccion","split","parseInt","isnum","test","length","checarDireccion","clase","calcularClase","cabe","mascara","calcularMascara","red","calcularDireccionRed","brodcast","direccionBrodcast","nuevos","crearSubredes","nuevosDatos","tam","calcularBitsSub","i","calcularedActual","push","subred","join","pip","calcularPrimera","uip","calcularUltima","actual","nue","map","e","suma","valid","primerO","bits","sub","prestarAhost","numero"],"mappings":"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","sourcesContent":["import React, {useEffect, useState }from 'react';\nimport { Input, message, Table, Form, Button, InputNumber } from 'antd';\nimport useForm from '../../Hook/useForm.js'\nfunction Home() {\n  document.title = \"Calculadora de Subredes\"\n  const [form,formedit] = useForm();\n  const [data, setData] = useState([]);\n  const [valido, setValido] = useState();\n  const columns = [\n    {\n      title: \"Numero de Subred\",\n      dataIndex: \"subred\",\n      key: 'subred',\n    },\n    {\n      title: \"Direccion de Subred\",\n      dataIndex: \"direccion\",\n      key: 'direccion',\n    },\n    {\n      title: \"Primer dir IP Host\",\n      dataIndex: \"pip\",\n      key: 'pip',\n    },\n    {\n      title: \"Ultima dir IP Host\",\n      dataIndex: \"uip\",\n      key: 'uip',\n    },\n    {\n      title: \"Dir Brodcast\",\n      dataIndex: \"brodcast\",\n      key: 'brodcast',\n    },\n    {\n      title: \"Mascara\",\n      dataIndex: \"mascara\",\n      key: 'mascara',\n    }\n\n  ]\n\n\n  const pushear = () =>{\n    if(form.direccionIP && form.numSub){\n      const direccion = form.direccionIP.split(\".\");\n      const numSub = parseInt(form.numSub,10);\n      let isnum = /^\\d+$/.test(numSub);\n      if(!isnum){\n        setValido(\"Ingresa un numero de subredes valido\");\n        setData([]);\n      }\n      if(direccion.length !== 4){\n        setValido(\"Direccion no valida ingresa otra con el formato punteado\");\n        setData([]);\n      }\n      else{\n        if(checarDireccion(direccion)){\n          const clase = calcularClase(parseInt(direccion[0],10),numSub);\n          if(cabe(numSub,clase)){\n            const mascara = calcularMascara(clase,numSub);\n            let red = calcularDireccionRed(clase,direccion);\n            const brodcast = direccionBrodcast(red,clase);\n            let nuevos = crearSubredes(red,numSub,mascara,brodcast);\n\n            setData(nuevos);\n          }else{\n            setValido(\"Eres ambicisioso pero no caben tantas subredes en tu direccion IP, prueba otra\");\n            setData([]);\n          }\n        }\n      }\n\n    }else{\n      setValido(\"Porfavor ingresa todos los campos  \")\n      setData([]);\n    }\n  }\n\n  const crearSubredes = (red,numSub,mascara,brodcast) =>{\n    let nuevosDatos = [];\n    const tam = 2 **(7-calcularBitsSub(numSub));\n    for(let i = 0; i < numSub; i++){\n        red = calcularedActual(red,numSub,i);\n        nuevosDatos.push({\n          key: i,\n          subred: i+1,\n          direccion: calcularedActual(red,numSub,i).join(\".\"),\n          pip:calcularPrimera(red,numSub,i).join(\".\"),\n          uip: calcularUltima(red,numSub,i+1).join(\".\"),\n          brodcast:brodcast,\n          mascara:mascara.join(\".\")\n        })\n    }\n    return nuevosDatos;\n  }\n\n  const calcularedActual = (red,numSub,actual) =>{\n    let nue = [];\n    red.map(e=> nue.push(e));\n    let suma = actual * (2 ** (8-calcularBitsSub(numSub)));\n    for(let i = 3; i >= 0; i--){\n      if(suma >= 255){\n        nue[i] = suma - 255;\n        suma = suma - 255;\n      }\n      else{\n        nue[i] = suma;\n        i=-1;\n      }\n    }\n    return nue;\n  }\n\n  const calcularPrimera = (red,numSub,actual) =>{\n    let nue = [];\n    red.map(e=> nue.push(e));\n    nue = calcularedActual(nue,numSub,actual);\n    for(let i = 3; i >= 0; i--){\n      if(nue[i] < 255){\n        nue[i] = nue[i]+1;\n        i=-1;\n      }\n    }\n    return nue;\n  }\n\n  const calcularUltima = (red,numSub,actual) =>{\n    let nue = [];\n    red.map(e=> nue.push(e));\n    let suma = actual * (2 ** (8-calcularBitsSub(numSub)));\n    suma--;\n    for(let i = 3; i >= 0; i--){\n      if(suma >= 255){\n        nue[i] = suma - 255;\n        suma = suma - 255;\n      }\n      else{\n        nue[i] = suma;\n        i=-1;\n      }\n    }\n    return nue;\n  }\n\n  const checarDireccion = (direccion) =>{\n    for(let i =0 ; i<direccion.length; i++){\n      const valid = /^\\d+$/.test(direccion[i]);\n      if(!valid || (direccion[i].length < 0 && direccion[i].length > 4)){\n        setValido(\"Direccion no valida ingresa otra con el formato punteado\");\n        setData([]);\n        return false;\n      }\n    }\n    return true;\n  }\n\n  const cabe = (numSub,clase) =>{\n    if(clase ===\"A\" && numSub <= 8388608) return true\n    else if(clase ===\"B\" && numSub <= 32768) return true\n    else if(clase ===\"C\" && numSub <= 128) return true\n    return false;\n  }\n\n  const calcularClase = (primerO, numSub) =>{\n    let clase;\n    const bits = calcularBitsSub(numSub);\n    if(primerO<=127) clase = \"A\"\n    else if(primerO > 127 && primerO <= 191)clase = \"B\"\n    else if(primerO > 191 && primerO <= 223) clase = \"C\"\n    else if(primerO > 223 && primerO <= 239) clase = \"D\"\n    else if(primerO > 240 && primerO <= 255) clase = \"E\"\n    else {\n      setValido(\"Red no valida ingresa otra\");\n      setData([]);\n      return \"F\"\n    }\n    setValido(\"Red Clase \" +clase+ \" con \" + bits + \" bit para subnetting\");\n    return clase;\n  }\n\n  const calcularDireccionRed = (clase, direccionIP) => {\n    let red = direccionIP;\n    if(clase == \"A\") red[1,2,3] = 0;\n    else if(clase ==\"B\") red[2,3] = 0;\n    else if(clase ==\"C\") red[3] = 0;\n    return red\n  }\n\n  const calcularMascara = (clase, numSub) =>{\n    const sub = calcularBitsSub(numSub);\n    if(clase == \"A\") return prestarAhost([255,0,0,0],sub);\n    else if(clase == \"B\") return prestarAhost([255,255,0,0],sub);\n    else if(clase ==\"C\") return prestarAhost([255,255,255,0],sub);\n    else return prestarAhost([255,255,255,255],sub);\n  }\n\n  const prestarAhost = (mascara, sub) =>{\n    let suma = 0;\n    for(let i = 0; i < sub; i++ ){\n      suma += 2**(7-i);\n    }\n    for(let i = 0; i<4;i++){\n      if(mascara[i] != 255){\n        if(suma>255){\n          mascara[i] = 255;\n          suma -= 255;\n        }else{\n          mascara[i] = suma;\n          suma = 0;\n          i = 4;\n        }\n      }\n    }\n    return mascara;\n  }\n\n\n  const calcularBitsSub = (numSub) =>{\n    let numero = 1;\n    while(2**numero < numSub) numero++;\n    return numero;\n  }\n\n  const direccionBrodcast = (red,clase) =>{\n    let nue = [];\n    red.map(e=> nue.push(e));\n    if(clase === \"A\"){\n      nue[1,2,3] = 255\n    }else if(clase ===\"B\"){\n      nue[2,3] = 255\n    }else if(clase===\"C\"){\n      nue[3] = 255\n    }\n    return nue;\n  }\n\n  return (\n    <div className=\"negro\">\n      <div className=\"todo\">\n        <h1>Bienvenido a calcular las subredes de una Direccion IP</h1>\n        <h2> Cual direccion quieres usar? </h2>\n        <Form layout = 'vertical'>\n          <label> Direccion IP </label>\n          <Input placeholder = \"Ingresa tu direccion IP\" name=\"direccionIP\"\n                  onChange={e => formedit(e)}/>\n          <label> Numero de Subredes </label>\n          <Input placeholder = \"Cuantas subredes deseas\" name=\"numSub\" type=\"number\"\n                  onChange = {e => formedit(e)}/>\n          <Button type=\"primary\" onClick={pushear} >Submit</Button>\n        </Form>\n        <h2>{valido}</h2>\n        <Table columns={columns} dataSource={data} />\n      </div>\n    </div>\n  );\n}\n\nexport default Home;\n"]},"metadata":{},"sourceType":"module"}