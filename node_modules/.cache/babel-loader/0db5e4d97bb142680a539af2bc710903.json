{"ast":null,"code":"var _jsxFileName = \"/home/diego/projectos/Redes/frontend/src/components/home/Home.js\";\nimport React, { useEffect, useState } from 'react';\nimport { Input, message, Table, Form, Button, InputNumber } from 'antd';\nimport useForm from '../../Hook/useForm.js';\n\nfunction Home() {\n  document.title = \"Calculadora de Subredes\";\n  const [form, formedit] = useForm();\n  const [data, setData] = useState([]);\n  const [valido, setValido] = useState();\n  const columns = [{\n    title: \"Numero de Subred\",\n    dataIndex: \"subred\",\n    key: 'subred'\n  }, {\n    title: \"Direccion de Subred\",\n    dataIndex: \"direccion\",\n    key: 'direccion'\n  }, {\n    title: \"Primer dir IP Host\",\n    dataIndex: \"pip\",\n    key: 'pip'\n  }, {\n    title: \"Ultima dir IP Host\",\n    dataIndex: \"uip\",\n    key: 'uip'\n  }, {\n    title: \"Dir Brodcast\",\n    dataIndex: \"brodcast\",\n    key: 'brodcast'\n  }, {\n    title: \"Mascara\",\n    dataIndex: \"mascara\",\n    key: 'mascara'\n  }];\n\n  const pushear = () => {\n    if (form.direccionIP && form.numSub) {\n      const direccion = form.direccionIP.split(\".\");\n      const numSub = parseInt(form.numSub, 10);\n      let isnum = /^\\d+$/.test(numSub);\n      if (!isnum) setValido(\"Ingresa un numero de subredes valido\");\n      if (direccion.length !== 4) setValido(\"Direccion no valida ingresa otra con el formato punteado\");else {\n        if (checarDireccion(direccion)) {\n          const clase = calcularClase(parseInt(direccion[0], 10), numSub);\n          const mascara = calcularMascara(clase, numSub);\n          let red = calcularDireccionRed(clase, direccion);\n          let nuevos = crearSubredes(red, numSub, mascara);\n          setData(nuevos);\n        }\n      }\n    } else setValido(\"Porfavor ingresa todos los campos  \");\n  };\n\n  const crearSubredes = (red, numSub, mascara) => {\n    let nuevosDatos = [];\n    const tam = 2 ** (7 - numSub);\n\n    for (let i = 0; i < numSub; i++) {\n      red = calcularedActual(red, numSub, i);\n      nuevosDatos.push({\n        key: i,\n        subred: i + 1,\n        direccion: calcularedActual(red, numSub, i),\n        pip: calcularPrimera(red, i),\n        uip: calcularUltima(red, numSub, i + 1),\n        brodcast: \"as\",\n        mascara: mascara\n      });\n    }\n\n    return nuevosDatos;\n  };\n\n  const calcularedActual = (red, numSub, actual) => {\n    let suma = actual * 2 ** (8 - numSub);\n\n    for (let i = 3; i >= 0; i--) {\n      if (suma >= 255) {\n        red[i] = suma - 255;\n        suma = suma - 255;\n      } else {\n        red[i] = suma;\n        i = -1;\n      }\n    }\n\n    return red;\n  };\n\n  const calcularPrimera = (red, numero) => {\n    let suma = 2 ** (numero - 1);\n\n    for (let i = 3; i >= 0; i--) {\n      if (suma >= 255) {\n        red[i] = suma - 255;\n        suma = suma - 255;\n      } else {\n        red[i] = suma;\n        i = -1;\n      }\n    }\n\n    return red;\n  };\n\n  const calcularUltima = (red, numSub, actual) => {\n    let suma = actual * 2 ** (8 - numSub);\n    suma--;\n\n    for (let i = 3; i >= 0; i--) {\n      if (suma >= 255) {\n        red[i] = suma - 255;\n        suma = suma - 255;\n      } else {\n        red[i] = suma;\n        i = -1;\n      }\n    }\n\n    return red;\n  };\n\n  const checarDireccion = direccion => {\n    for (let i = 0; i < direccion.length; i++) {\n      const valid = /^\\d+$/.test(direccion[i]);\n\n      if (!valid || direccion[i].length < 0 && direccion[i].length > 4) {\n        setValido(\"Direccion no valida ingresa otra con el formato punteado puto\");\n        return false;\n      }\n    }\n\n    return true;\n  };\n\n  const calcularClase = (primerO, numSub) => {\n    let clase;\n    const bits = calcularBitsSub(numSub);\n    if (primerO <= 127) clase = \"A\";else if (primerO > 127 && primerO <= 191) clase = \"B\";else if (primerO > 191 && primerO <= 223) clase = \"C\";else if (primerO > 223 && primerO <= 239) clase = \"D\";else if (primerO > 240 && primerO <= 255) clase = \"E\";else {\n      setValido(\"Red no valida ingresa otra\");\n      return \"F\";\n    }\n    setValido(\"Red Clase \" + clase + \" con \" + bits + \" para subnetting\");\n    return clase;\n  };\n\n  const calcularDireccionRed = (clase, direccionIP) => {\n    let red = direccionIP;\n    if (clase == \"A\") red[(1, 2, 3)] = 0;else if (clase == \"B\") red[(2, 3)] = 0;else if (clase == \"C\") red[3] = 0;\n    return red;\n  };\n\n  const calcularMascara = (clase, numSub) => {\n    const sub = calcularBitsSub(numSub);\n    if (clase == \"A\") return prestarAhost([255, 0, 0, 0], sub);else if (clase == \"B\") return prestarAhost([255, 255, 0, 0], sub);else if (clase == \"C\") return prestarAhost([255, 255, 255, 0], sub);else return prestarAhost([255, 255, 255, 255], sub);\n  };\n\n  const prestarAhost = (mascara, sub) => {\n    let suma;\n\n    for (let i = 0; i < sub; i++) {\n      suma += 2 ^ 7 - i;\n    }\n\n    for (let i = 0; i < 4; i++) {\n      if (mascara[i] != 255) {\n        if (suma > 255) {\n          mascara[i] = 255;\n          suma -= 255;\n        } else {\n          mascara[i] = suma;\n          suma = 0;\n        }\n      }\n    }\n\n    return mascara;\n  };\n\n  const calcularBitsSub = numSub => {\n    let numero = 1;\n\n    while (2 ** numero < numSub) numero++;\n\n    return numero;\n  };\n\n  return /*#__PURE__*/React.createElement(\"div\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 198,\n      columnNumber: 5\n    }\n  }, /*#__PURE__*/React.createElement(\"h1\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 199,\n      columnNumber: 7\n    }\n  }, \"Bienvenido a calcular las direcciones ip\"), /*#__PURE__*/React.createElement(\"h2\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 200,\n      columnNumber: 7\n    }\n  }, \" Cual direccion quieres usar? \"), /*#__PURE__*/React.createElement(Form, {\n    layout: \"horizontal\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 201,\n      columnNumber: 7\n    }\n  }, /*#__PURE__*/React.createElement(Form.Item, {\n    label: \"Direccion IP\",\n    name: \"direccionIP\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 202,\n      columnNumber: 9\n    }\n  }, /*#__PURE__*/React.createElement(Input, {\n    placeholder: \"Ingresa tu direccion IP\",\n    name: \"direccionIP\",\n    onChange: e => formedit(e),\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 203,\n      columnNumber: 11\n    }\n  })), /*#__PURE__*/React.createElement(Form.Item, {\n    label: \"Numbero de Subredes\",\n    name: \"numSub\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 206,\n      columnNumber: 9\n    }\n  }, /*#__PURE__*/React.createElement(Input, {\n    placeholder: \"Cuantas subredes deseas\",\n    name: \"numSub\",\n    type: \"number\",\n    onChange: e => formedit(e),\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 207,\n      columnNumber: 11\n    }\n  })), /*#__PURE__*/React.createElement(Form.Item, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 210,\n      columnNumber: 9\n    }\n  }, /*#__PURE__*/React.createElement(Button, {\n    type: \"primary\",\n    onClick: pushear,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 211,\n      columnNumber: 11\n    }\n  }, \"Submit\"))), /*#__PURE__*/React.createElement(\"h1\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 214,\n      columnNumber: 7\n    }\n  }, valido), /*#__PURE__*/React.createElement(Table, {\n    columns: columns,\n    dataSource: data,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 215,\n      columnNumber: 7\n    }\n  }));\n}\n\nexport default Home;","map":{"version":3,"sources":["/home/diego/projectos/Redes/frontend/src/components/home/Home.js"],"names":["React","useEffect","useState","Input","message","Table","Form","Button","InputNumber","useForm","Home","document","title","form","formedit","data","setData","valido","setValido","columns","dataIndex","key","pushear","direccionIP","numSub","direccion","split","parseInt","isnum","test","length","checarDireccion","clase","calcularClase","mascara","calcularMascara","red","calcularDireccionRed","nuevos","crearSubredes","nuevosDatos","tam","i","calcularedActual","push","subred","pip","calcularPrimera","uip","calcularUltima","brodcast","actual","suma","numero","valid","primerO","bits","calcularBitsSub","sub","prestarAhost","e"],"mappings":"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","sourcesContent":["import React, {useEffect, useState }from 'react';\nimport { Input, message, Table, Form, Button, InputNumber } from 'antd';\nimport useForm from '../../Hook/useForm.js'\nfunction Home() {\n  document.title = \"Calculadora de Subredes\"\n  const [form,formedit] = useForm();\n  const [data, setData] = useState([]);\n  const [valido, setValido] = useState();\n  const columns = [\n    {\n      title: \"Numero de Subred\",\n      dataIndex: \"subred\",\n      key: 'subred',\n    },\n    {\n      title: \"Direccion de Subred\",\n      dataIndex: \"direccion\",\n      key: 'direccion',\n    },\n    {\n      title: \"Primer dir IP Host\",\n      dataIndex: \"pip\",\n      key: 'pip',\n    },\n    {\n      title: \"Ultima dir IP Host\",\n      dataIndex: \"uip\",\n      key: 'uip',\n    },\n    {\n      title: \"Dir Brodcast\",\n      dataIndex: \"brodcast\",\n      key: 'brodcast',\n    },\n    {\n      title: \"Mascara\",\n      dataIndex: \"mascara\",\n      key: 'mascara',\n    }\n\n  ]\n\n\n  const pushear = () =>{\n    if(form.direccionIP && form.numSub){\n      const direccion = form.direccionIP.split(\".\");\n      const numSub = parseInt(form.numSub,10);\n      let isnum = /^\\d+$/.test(numSub);\n      if(!isnum) setValido(\"Ingresa un numero de subredes valido\");\n      if(direccion.length !== 4) setValido(\"Direccion no valida ingresa otra con el formato punteado\");\n      else{\n        if(checarDireccion(direccion)){\n          const clase = calcularClase(parseInt(direccion[0],10),numSub);\n          const mascara = calcularMascara(clase,numSub);\n          let red = calcularDireccionRed(clase,direccion);\n          let nuevos = crearSubredes(red,numSub,mascara);\n          setData(nuevos);\n        }\n      }\n\n    }else setValido(\"Porfavor ingresa todos los campos  \")\n  }\n\n  const crearSubredes = (red,numSub,mascara) =>{\n    let nuevosDatos = [];\n    const tam = 2 **(7-numSub);\n    for(let i = 0; i < numSub; i++){\n        red = calcularedActual(red,numSub,i);\n        nuevosDatos.push({\n          key: i,\n          subred: i+1,\n          direccion: calcularedActual(red,numSub,i),\n          pip:calcularPrimera(red,i),\n          uip: calcularUltima(red,numSub,i+1),\n          brodcast:\"as\",\n          mascara:mascara\n        })\n    }\n    return nuevosDatos;\n  }\n\n  const calcularedActual = (red,numSub,actual) =>{\n    let suma = actual * (2 ** (8-numSub));\n    for(let i = 3; i >= 0; i--){\n      if(suma >= 255){\n        red[i] = suma - 255;\n        suma = suma - 255;\n      }\n      else{\n        red[i] = suma;\n        i=-1;\n      }\n    }\n    return red;\n  }\n\n  const calcularPrimera = (red,numero) =>{\n    let suma = 2 ** ( numero -1);\n    for(let i = 3; i >= 0; i--){\n      if(suma >= 255){\n        red[i] = suma - 255;\n        suma = suma - 255;\n      }\n      else{\n        red[i] = suma;\n        i=-1;\n      }\n    }\n    return red;\n  }\n\n  const calcularUltima = (red,numSub,actual) =>{\n    let suma = actual * (2 ** (8-numSub));\n    suma--;\n    for(let i = 3; i >= 0; i--){\n      if(suma >= 255){\n        red[i] = suma - 255;\n        suma = suma - 255;\n      }\n      else{\n        red[i] = suma;\n        i=-1;\n      }\n    }\n    return red;\n  }\n\n  const checarDireccion = (direccion) =>{\n    for(let i =0 ; i<direccion.length; i++){\n      const valid = /^\\d+$/.test(direccion[i]);\n      if(!valid || (direccion[i].length < 0 && direccion[i].length > 4)){\n        setValido(\"Direccion no valida ingresa otra con el formato punteado puto\");\n        return false;\n      }\n    }\n    return true;\n  }\n\n  const calcularClase = (primerO, numSub) =>{\n    let clase;\n    const bits = calcularBitsSub(numSub);\n    if(primerO<=127) clase = \"A\"\n    else if(primerO > 127 && primerO <= 191)clase = \"B\"\n    else if(primerO > 191 && primerO <= 223) clase = \"C\"\n    else if(primerO > 223 && primerO <= 239) clase = \"D\"\n    else if(primerO > 240 && primerO <= 255) clase = \"E\"\n    else {\n      setValido(\"Red no valida ingresa otra\");\n      return \"F\"\n    }\n    setValido(\"Red Clase \" +clase+ \" con \" + bits + \" para subnetting\");\n    return clase;\n  }\n\n  const calcularDireccionRed = (clase, direccionIP) => {\n    let red = direccionIP;\n    if(clase == \"A\") red[1,2,3] = 0;\n    else if(clase ==\"B\") red[2,3] = 0;\n    else if(clase ==\"C\") red[3] = 0;\n    return red\n  }\n\n  const calcularMascara = (clase, numSub) =>{\n    const sub = calcularBitsSub(numSub);\n    if(clase == \"A\") return prestarAhost([255,0,0,0],sub);\n    else if(clase == \"B\") return prestarAhost([255,255,0,0],sub);\n    else if(clase ==\"C\") return prestarAhost([255,255,255,0],sub);\n    else return prestarAhost([255,255,255,255],sub);\n  }\n\n  const prestarAhost = (mascara, sub) =>{\n    let suma;\n    for(let i = 0; i < sub; i++ ){\n      suma += 2^(7-i);\n    }\n    for(let i = 0; i<4;i++){\n      if(mascara[i] != 255){\n        if(suma>255){\n          mascara[i] = 255;\n          suma -= 255;\n        }else{\n          mascara[i] = suma;\n          suma = 0;\n        }\n      }\n    }\n    return mascara;\n  }\n\n\n  const calcularBitsSub = (numSub) =>{\n    let numero = 1;\n    while(2**numero < numSub) numero++;\n    return numero;\n  }\n\n  return (\n    <div>\n      <h1>Bienvenido a calcular las direcciones ip</h1>\n      <h2> Cual direccion quieres usar? </h2>\n      <Form layout = 'horizontal'>\n        <Form.Item label=\"Direccion IP\" name = \"direccionIP\">\n          <Input placeholder = \"Ingresa tu direccion IP\" name=\"direccionIP\"\n                  onChange={e => formedit(e)}/>\n        </Form.Item>\n        <Form.Item label=\"Numbero de Subredes\" name = \"numSub\">\n          <Input placeholder = \"Cuantas subredes deseas\" name=\"numSub\" type=\"number\"\n                  onChange = {e => formedit(e)}/>\n        </Form.Item>\n        <Form.Item>\n          <Button type=\"primary\" onClick={pushear} >Submit</Button>\n        </Form.Item>\n      </Form>\n      <h1>{valido}</h1>\n      <Table columns={columns} dataSource={data} />\n    </div>\n  );\n}\n\nexport default Home;\n"]},"metadata":{},"sourceType":"module"}