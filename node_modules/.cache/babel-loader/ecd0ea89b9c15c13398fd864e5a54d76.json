{"ast":null,"code":"var _jsxFileName = \"/home/diego/projectos/Redes/frontend/src/components/home/Home.js\";\nimport React, { useEffect, useState } from 'react';\nimport { Input, message, Table, Form, Button, InputNumber } from 'antd';\nimport useForm from '../../Hook/useForm.js';\n\nfunction Home() {\n  document.title = \"Calculadora de Subredes\";\n  const [form, formedit] = useForm();\n  const [data, setData] = useState([]);\n  const [valido, setValido] = useState();\n  const columns = [{\n    title: \"Numero de Subred\",\n    dataIndex: \"subred\",\n    key: 'subred'\n  }, {\n    title: \"Direccion de Subred\",\n    dataIndex: \"direccion\",\n    key: 'direccion'\n  }, {\n    title: \"Primer dir IP Host\",\n    dataIndex: \"pip\",\n    key: 'pip'\n  }, {\n    title: \"Ultima dir IP Host\",\n    dataIndex: \"uip\",\n    key: 'uip'\n  }, {\n    title: \"Dir Brodcast\",\n    dataIndex: \"brodcast\",\n    key: 'brodcast'\n  }, {\n    title: \"Mascara\",\n    dataIndex: \"mascara\",\n    key: 'mascara'\n  }];\n\n  const pushear = () => {\n    if (form.direccionIP && form.numSub) {\n      const direccion = form.direccionIP.split(\".\");\n      const numSub = parseInt(form.numSub, 10);\n      let isnum = /^\\d+$/.test(numSub);\n      if (!isnum) setValido(\"Ingresa un numero de subredes valido\");\n      if (direccion.length !== 4) setValido(\"Direccion no valida ingresa otra con el formato punteado\");else {\n        if (checarDireccion(direccion)) {\n          calcularClase(parseInt(direccion[0], 10), numSub);\n        }\n      }\n    } else setValido(\"Porfavor ingresa todos los campos  \");\n  };\n\n  const checarDireccion = direccion => {\n    for (let i = 0; i < direccion.length; i++) {\n      const valid = /^\\d+$/.test(direccion[i]);\n\n      if (!valid || direccion[i].length < 0 && direccion[i].length > 4) {\n        setValido(\"Direccion no valida ingresa otra con el formato punteado puto\");\n        return false;\n      }\n    }\n\n    return true;\n  };\n\n  const calcularClase = (primerO, numSub) => {\n    const bits = calcularBitsSub(numSub);\n    console.log(primerO);\n    if (primerO <= 127) setValido(\"Red Clase A con \" + bits + \" para subnetting\");else if (primerO > 127 && primerO <= 191) setValido(\"Red Clase B con \" + bits + \" para subnetting\");else if (primerO > 191 && primerO <= 223) setValido(\"Red Clase C con \" + bits + \" para subnetting\");else if (primerO > 223 && primerO <= 239) setValido(\"Red Clase D con \" + bits + \" para subnetting\");else if (primerO > 240 && primerO <= 255) setValido(\"Red Clase E con \" + bits + \" para subnetting\");else setValido(\"Red no valida ingresa otra\");\n  };\n\n  const calcularBitsSub = numSub => {\n    let numero = 1;\n\n    while (2 ** numero < numSub) numero++;\n\n    return numero;\n  };\n\n  return /*#__PURE__*/React.createElement(\"div\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 89,\n      columnNumber: 5\n    }\n  }, /*#__PURE__*/React.createElement(\"h1\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 90,\n      columnNumber: 7\n    }\n  }, \"Bienvenido a calcular las direcciones ip\"), /*#__PURE__*/React.createElement(\"h2\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 91,\n      columnNumber: 7\n    }\n  }, \" Cual direccion quieres usar? \"), /*#__PURE__*/React.createElement(Form, {\n    layout: \"horizontal\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 92,\n      columnNumber: 7\n    }\n  }, /*#__PURE__*/React.createElement(Form.Item, {\n    label: \"Direccion IP\",\n    name: \"direccionIP\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 93,\n      columnNumber: 9\n    }\n  }, /*#__PURE__*/React.createElement(Input, {\n    placeholder: \"Ingresa tu direccion IP\",\n    name: \"direccionIP\",\n    onChange: e => formedit(e),\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 94,\n      columnNumber: 11\n    }\n  })), /*#__PURE__*/React.createElement(Form.Item, {\n    label: \"Numbero de Subredes\",\n    name: \"numSub\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 97,\n      columnNumber: 9\n    }\n  }, /*#__PURE__*/React.createElement(Input, {\n    placeholder: \"Cuantas subredes deseas\",\n    name: \"numSub\",\n    type: \"number\",\n    onChange: e => formedit(e),\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 98,\n      columnNumber: 11\n    }\n  })), /*#__PURE__*/React.createElement(Form.Item, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 101,\n      columnNumber: 9\n    }\n  }, /*#__PURE__*/React.createElement(Button, {\n    type: \"primary\",\n    onClick: pushear,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 102,\n      columnNumber: 11\n    }\n  }, \"Submit\"))), /*#__PURE__*/React.createElement(\"h1\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 105,\n      columnNumber: 7\n    }\n  }, valido), /*#__PURE__*/React.createElement(Table, {\n    columns: columns,\n    dataSource: data,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 106,\n      columnNumber: 7\n    }\n  }));\n}\n\nexport default Home;","map":{"version":3,"sources":["/home/diego/projectos/Redes/frontend/src/components/home/Home.js"],"names":["React","useEffect","useState","Input","message","Table","Form","Button","InputNumber","useForm","Home","document","title","form","formedit","data","setData","valido","setValido","columns","dataIndex","key","pushear","direccionIP","numSub","direccion","split","parseInt","isnum","test","length","checarDireccion","calcularClase","i","valid","primerO","bits","calcularBitsSub","console","log","numero","e"],"mappings":"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","sourcesContent":["import React, {useEffect, useState }from 'react';\nimport { Input, message, Table, Form, Button, InputNumber } from 'antd';\nimport useForm from '../../Hook/useForm.js'\nfunction Home() {\n  document.title = \"Calculadora de Subredes\"\n  const [form,formedit] = useForm();\n  const [data, setData] = useState([]);\n  const [valido, setValido] = useState();\n  const columns = [\n    {\n      title: \"Numero de Subred\",\n      dataIndex: \"subred\",\n      key: 'subred',\n    },\n    {\n      title: \"Direccion de Subred\",\n      dataIndex: \"direccion\",\n      key: 'direccion',\n    },\n    {\n      title: \"Primer dir IP Host\",\n      dataIndex: \"pip\",\n      key: 'pip',\n    },\n    {\n      title: \"Ultima dir IP Host\",\n      dataIndex: \"uip\",\n      key: 'uip',\n    },\n    {\n      title: \"Dir Brodcast\",\n      dataIndex: \"brodcast\",\n      key: 'brodcast',\n    },\n    {\n      title: \"Mascara\",\n      dataIndex: \"mascara\",\n      key: 'mascara',\n    }\n\n  ]\n\n\n  const pushear = () =>{\n    if(form.direccionIP && form.numSub){\n      const direccion = form.direccionIP.split(\".\");\n      const numSub = parseInt(form.numSub,10);\n      let isnum = /^\\d+$/.test(numSub);\n      if(!isnum) setValido(\"Ingresa un numero de subredes valido\");\n      if(direccion.length !== 4) setValido(\"Direccion no valida ingresa otra con el formato punteado\");\n      else{\n        if(checarDireccion(direccion)){\n          calcularClase(parseInt(direccion[0],10),numSub);\n        }\n      }\n\n    }else setValido(\"Porfavor ingresa todos los campos  \")\n  }\n\n  const checarDireccion = (direccion) =>{\n    for(let i =0 ; i<direccion.length; i++){\n      const valid = /^\\d+$/.test(direccion[i]);\n      if(!valid || (direccion[i].length < 0 && direccion[i].length > 4)){\n        setValido(\"Direccion no valida ingresa otra con el formato punteado puto\");\n        return false;\n      }\n    }\n    return true;\n  }\n\n  const calcularClase = (primerO, numSub) =>{\n    const bits = calcularBitsSub(numSub);\n    console.log(primerO);\n    if(primerO<=127) setValido(\"Red Clase A con \" + bits + \" para subnetting\");\n    else if(primerO > 127 && primerO <= 191) setValido(\"Red Clase B con \" + bits + \" para subnetting\");\n    else if(primerO > 191 && primerO <= 223) setValido(\"Red Clase C con \" + bits + \" para subnetting\");\n    else if(primerO > 223 && primerO <= 239) setValido(\"Red Clase D con \" + bits + \" para subnetting\");\n    else if(primerO > 240 && primerO <= 255) setValido(\"Red Clase E con \" + bits + \" para subnetting\");\n    else setValido(\"Red no valida ingresa otra\");\n  }\n\n  const calcularBitsSub = (numSub) =>{\n    let numero = 1;\n    while(2**numero < numSub) numero++;\n    return numero;\n  }\n\n  return (\n    <div>\n      <h1>Bienvenido a calcular las direcciones ip</h1>\n      <h2> Cual direccion quieres usar? </h2>\n      <Form layout = 'horizontal'>\n        <Form.Item label=\"Direccion IP\" name = \"direccionIP\">\n          <Input placeholder = \"Ingresa tu direccion IP\" name=\"direccionIP\"\n                  onChange={e => formedit(e)}/>\n        </Form.Item>\n        <Form.Item label=\"Numbero de Subredes\" name = \"numSub\">\n          <Input placeholder = \"Cuantas subredes deseas\" name=\"numSub\" type=\"number\"\n                  onChange = {e => formedit(e)}/>\n        </Form.Item>\n        <Form.Item>\n          <Button type=\"primary\" onClick={pushear} >Submit</Button>\n        </Form.Item>\n      </Form>\n      <h1>{valido}</h1>\n      <Table columns={columns} dataSource={data} />\n    </div>\n  );\n}\n\nexport default Home;\n"]},"metadata":{},"sourceType":"module"}