{"version":3,"sources":["Hook/useForm.js","components/home/Home.js","components/404/NotFound.js","Router.js","serviceWorker.js","index.js"],"names":["useForm","useState","form","setForm","e","persist","prevState","target","name","value","Home","document","title","formedit","data","setData","valido","setValido","crearSubredes","red","numSub","mascara","brodcast","nuevosDatos","i","calcularBitsSub","calcularedActual","push","key","subred","direccion","join","pip","calcularPrimera","uip","calcularUltima","actual","nue","map","suma","checarDireccion","length","test","cabe","clase","calcularClase","primerO","bits","calcularDireccionRed","direccionIP","calcularMascara","sub","prestarAhost","numero","direccionBrodcast","className","layout","placeholder","onChange","type","onClick","split","parseInt","nuevos","columns","dataIndex","dataSource","NotFound","Router","exact","path","component","Boolean","window","location","hostname","match","ReactDOM","render","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.9b8af557.chunk.js","sourcesContent":["import { useState } from \"react\";\n\nfunction useForm() {\n  const [form, setForm] = useState({});\n  const handleInput = e => {\n    e.persist();\n    setForm(prevState => ({\n      ...prevState,\n      [e.target.name]: e.target.value\n    }));\n  };\n  return [form, handleInput];\n}\nexport default useForm;\n","import React, {useEffect, useState }from 'react';\nimport { Input, message, Table, Form, Button, InputNumber } from 'antd';\nimport useForm from '../../Hook/useForm.js'\nfunction Home() {\n  document.title = \"Calculadora de Subredes\"\n  const [form,formedit] = useForm();\n  const [data, setData] = useState([]);\n  const [valido, setValido] = useState();\n  const columns = [\n    {\n      title: \"Numero de Subred\",\n      dataIndex: \"subred\",\n      key: 'subred',\n    },\n    {\n      title: \"Direccion de Subred\",\n      dataIndex: \"direccion\",\n      key: 'direccion',\n    },\n    {\n      title: \"Primer dir IP Host\",\n      dataIndex: \"pip\",\n      key: 'pip',\n    },\n    {\n      title: \"Ultima dir IP Host\",\n      dataIndex: \"uip\",\n      key: 'uip',\n    },\n    {\n      title: \"Dir Brodcast\",\n      dataIndex: \"brodcast\",\n      key: 'brodcast',\n    },\n    {\n      title: \"Mascara\",\n      dataIndex: \"mascara\",\n      key: 'mascara',\n    }\n\n  ]\n\n\n  const pushear = () =>{\n    if(form.direccionIP && form.numSub){\n      const direccion = form.direccionIP.split(\".\");\n      const numSub = parseInt(form.numSub,10);\n      let isnum = /^\\d+$/.test(numSub);\n      if(!isnum){\n        setValido(\"Ingresa un numero de subredes valido\");\n        setData([]);\n      }\n      if(direccion.length !== 4){\n        setValido(\"Direccion no valida ingresa otra con el formato punteado\");\n        setData([]);\n      }\n      else{\n        if(checarDireccion(direccion)){\n          const clase = calcularClase(parseInt(direccion[0],10),numSub);\n          if(cabe(numSub,clase)){\n            const mascara = calcularMascara(clase,numSub);\n            let red = calcularDireccionRed(clase,direccion);\n            const brodcast = direccionBrodcast(red,clase);\n            let nuevos = crearSubredes(red,numSub,mascara,brodcast);\n\n            setData(nuevos);\n          }else{\n            setValido(\"Eres ambicisioso pero no caben tantas subredes en tu direccion IP, prueba otra\");\n            setData([]);\n          }\n        }\n      }\n\n    }else{\n      setValido(\"Porfavor ingresa todos los campos  \")\n      setData([]);\n    }\n  }\n\n  const crearSubredes = (red,numSub,mascara,brodcast) =>{\n    let nuevosDatos = [];\n    const tam = 2 **(7-calcularBitsSub(numSub));\n    for(let i = 0; i < numSub; i++){\n        red = calcularedActual(red,numSub,i);\n        nuevosDatos.push({\n          key: i,\n          subred: i+1,\n          direccion: calcularedActual(red,numSub,i).join(\".\"),\n          pip:calcularPrimera(red,numSub,i).join(\".\"),\n          uip: calcularUltima(red,numSub,i+1).join(\".\"),\n          brodcast:brodcast.join(\".\"),\n          mascara:mascara.join(\".\")\n        })\n    }\n    return nuevosDatos;\n  }\n\n  const calcularedActual = (red,numSub,actual) =>{\n    let nue = [];\n    red.map(e=> nue.push(e));\n    let suma = actual * (2 ** (8-calcularBitsSub(numSub)));\n    for(let i = 3; i >= 0; i--){\n      if(suma >= 255){\n        nue[i] = suma - 255;\n        suma = suma - 255;\n      }\n      else{\n        nue[i] = suma;\n        i=-1;\n      }\n    }\n    return nue;\n  }\n\n  const calcularPrimera = (red,numSub,actual) =>{\n    let nue = [];\n    red.map(e=> nue.push(e));\n    nue = calcularedActual(nue,numSub,actual);\n    for(let i = 3; i >= 0; i--){\n      if(nue[i] < 255){\n        nue[i] = nue[i]+1;\n        i=-1;\n      }\n    }\n    return nue;\n  }\n\n  const calcularUltima = (red,numSub,actual) =>{\n    let nue = [];\n    red.map(e=> nue.push(e));\n    let suma = actual * (2 ** (8-calcularBitsSub(numSub)));\n    suma--;\n    for(let i = 3; i >= 0; i--){\n      if(suma >= 255){\n        nue[i] = suma - 255;\n        suma = suma - 255;\n      }\n      else{\n        nue[i] = suma;\n        i=-1;\n      }\n    }\n    return nue;\n  }\n\n  const checarDireccion = (direccion) =>{\n    for(let i =0 ; i<direccion.length; i++){\n      const valid = /^\\d+$/.test(direccion[i]);\n      if(!valid || (direccion[i].length < 0 && direccion[i].length > 4) || direccion[i]>255){\n        setValido(\"Direccion no valida ingresa otra con el formato punteado\");\n        setData([]);\n        return false;\n      }\n    }\n    return true;\n  }\n\n  const cabe = (numSub,clase) =>{\n    if(clase ===\"A\" && numSub <= 8388608) return true\n    else if(clase ===\"B\" && numSub <= 32768) return true\n    else if(clase ===\"C\" && numSub <= 128) return true\n    return false;\n  }\n\n  const calcularClase = (primerO, numSub) =>{\n    let clase;\n    const bits = calcularBitsSub(numSub);\n    if(primerO<=127) clase = \"A\"\n    else if(primerO > 127 && primerO <= 191)clase = \"B\"\n    else if(primerO > 191 && primerO <= 223) clase = \"C\"\n    else if(primerO > 223 && primerO <= 239) clase = \"D\"\n    else if(primerO > 240 && primerO <= 255) clase = \"E\"\n    else {\n      setValido(\"Red no valida ingresa otra\");\n      setData([]);\n      return \"F\"\n    }\n    setValido(\"Red Clase \" +clase+ \" con \" + bits + \" bit para subnetting\");\n    return clase;\n  }\n\n  const calcularDireccionRed = (clase, direccionIP) => {\n    let red = direccionIP;\n    if(clase == \"A\") red[1,2,3] = 0;\n    else if(clase ==\"B\") red[2,3] = 0;\n    else if(clase ==\"C\") red[3] = 0;\n    return red\n  }\n\n  const calcularMascara = (clase, numSub) =>{\n    const sub = calcularBitsSub(numSub);\n    if(clase == \"A\") return prestarAhost([255,0,0,0],sub);\n    else if(clase == \"B\") return prestarAhost([255,255,0,0],sub);\n    else if(clase ==\"C\") return prestarAhost([255,255,255,0],sub);\n    else return prestarAhost([255,255,255,255],sub);\n  }\n\n  const prestarAhost = (mascara, sub) =>{\n    let suma = 0;\n    for(let i = 0; i < sub; i++ ){\n      suma += 2**(7-i);\n    }\n    for(let i = 0; i<4;i++){\n      if(mascara[i] != 255){\n        if(suma>255){\n          mascara[i] = 255;\n          suma -= 255;\n        }else{\n          mascara[i] = suma;\n          suma = 0;\n          i = 4;\n        }\n      }\n    }\n    return mascara;\n  }\n\n\n  const calcularBitsSub = (numSub) =>{\n    let numero = 1;\n    while(2**numero < numSub) numero++;\n    return numero;\n  }\n\n  const direccionBrodcast = (red,clase) =>{\n    let nue = [];\n    red.map(e=> nue.push(e));\n    if(clase === \"A\"){\n      nue[1,2,3] = 255\n    }else if(clase ===\"B\"){\n      nue[2,3] = 255\n    }else if(clase===\"C\"){\n      nue[3] = 255\n    }\n    return nue;\n  }\n\n  return (\n    <div className=\"negro\">\n      <div className=\"todo\">\n        <h1>Bienvenido a calcular las subredes de una Direccion IP</h1>\n        <h2> Cual direccion quieres usar? </h2>\n        <Form layout = 'vertical'>\n          <label> Direccion IP </label>\n          <Input placeholder = \"Ingresa tu direccion IP\" name=\"direccionIP\"\n                  onChange={e => formedit(e)}/>\n          <label> Numero de Subredes </label>\n          <Input placeholder = \"Cuantas subredes deseas\" name=\"numSub\" type=\"number\"\n                  onChange = {e => formedit(e)}/>\n          <Button type=\"primary\" onClick={pushear} >Submit</Button>\n        </Form>\n        <h2>{valido}</h2>\n        <Table columns={columns} dataSource={data} />\n      </div>\n    </div>\n  );\n}\n\nexport default Home;\n","import React from 'react';\n\nfunction NotFound() {\n  return (\n    <div>\n      <h2>Not found</h2>\n    </div>\n  );\n}\n\nexport default NotFound;\n","import React from 'react';\nimport { BrowserRouter, Switch, Route } from 'react-router-dom';\nimport Home from './components/home/Home';\nimport NotFound from './components/404/NotFound.js';\n\nconst Router = () => (\n  <BrowserRouter>\n    <Switch>\n      <Route exact path=\"/\" component={Home} />\n      <Route component={NotFound} />\n    </Switch>\n  </BrowserRouter>\n);\n\nexport default Router;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport Router from './Router';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<Router />, document.getElementById('root'));\n\nserviceWorker.unregister();\n"],"sourceRoot":""}